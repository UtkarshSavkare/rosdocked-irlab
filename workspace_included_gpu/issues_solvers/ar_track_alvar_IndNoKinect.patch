--- IndividualMarkersNoKinect.cpp	2021-04-29 09:40:39.049243880 +0000
+++ IndividualMarkersNoKinect_new.cpp	2021-04-29 09:24:07.644212600 +0000
@@ -109,16 +109,20 @@
       arPoseMarkers_.markers.clear();
       for (size_t i = 0; i < marker_detector.markers->size(); i++)
       {
-        // Get the pose relative to the camera
-        int id = (*(marker_detector.markers))[i].GetId();
-        Pose p = (*(marker_detector.markers))[i].pose;
-        double px = p.translation[0] / 100.0;
-        double py = p.translation[1] / 100.0;
-        double pz = p.translation[2] / 100.0;
-        double qx = p.quaternion[1];
-        double qy = p.quaternion[2];
-        double qz = p.quaternion[3];
-        double qw = p.quaternion[0];
+         // Get the pose relative to the camera
+    int id = (*(marker_detector.markers))[i].GetId();
+    Pose p = (*(marker_detector.markers))[i].pose;
+    double px = p.translation[0] / 100.0;
+    double py = p.translation[1] / 100.0;
+    double pz = p.translation[2] / 100.0;
+
+    cv::Mat quat =cv::Mat(4, 1, CV_64F);
+    p.GetQuaternion(quat);
+    double qx = quat.at<double>(1,0); //p.quaternion[1]; #leaving these comments for the record of what was not working properly in machinekoder's version
+    double qy = quat.at<double>(2,0); //p.quaternion[2];
+    double qz = quat.at<double>(3,0); //p.quaternion[3];
+    double qw = quat.at<double>(0,0); //p.quaternion[0];
+	      
 
         tf::Quaternion rotation(qx, qy, qz, qw);
         tf::Vector3 origin(px, py, pz);
@@ -217,11 +221,11 @@
       }
       arMarkerPub_.publish(arPoseMarkers_);
     }
-    catch (cv_bridge::Exception& e)
-    {
-      ROS_ERROR("Could not convert from '%s' to 'rgb8'.",
-                image_msg->encoding.c_str());
-    }
+catch (const std::exception& e)
+{
+  ROS_ERROR("Error in ar_track_alvar callback");
+}
+
   }
 }
 
